{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Structure",
        "description": "Initialize project with HTML, CSS (Tailwind), and JavaScript files for all required pages with navigation.",
        "details": "Create the following files:\n1. index.html (Dashboard)\n2. goals.html (Goals)\n3. friends.html (Friends)\n4. profile.html (Profile)\n5. styles.css (with Tailwind imports)\n6. app.js (main JavaScript file)\n7. storage.js (localStorage handling)\n\nSetup Tailwind CSS with Marcus blue color palette. Create a shared layout with bottom navigation that appears on all pages. Navigation should highlight the current page. Implement basic responsive design using Tailwind's mobile-first approach.\n\nBottom navigation HTML structure:\n```html\n<nav class=\"fixed bottom-0 w-full bg-white shadow-lg\">\n  <div class=\"flex justify-around items-center h-16\">\n    <a href=\"index.html\" class=\"nav-item\" id=\"nav-dashboard\">\n      <i class=\"nav-icon\"><!-- Dashboard icon --></i>\n      <span>Dashboard</span>\n    </a>\n    <!-- Repeat for other nav items -->\n  </div>\n</nav>\n```",
        "testStrategy": "Manually test navigation between all pages. Verify that the active page is highlighted in the navigation. Test responsiveness on different screen sizes using browser dev tools. Ensure Tailwind CSS is properly configured and the Marcus blue color is applied correctly.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "LocalStorage Data Structure Implementation",
        "description": "Implement the localStorage data structure and utility functions for storing and retrieving data.",
        "details": "Create a storage.js file with functions to handle localStorage operations for all required keys: marcus_goals, marcus_progress, marcus_settings, marcus_achievements, marcus_stats.\n\nImplement the following functions:\n```javascript\n// Initialize storage if not exists\nfunction initializeStorage() {\n  if (!localStorage.getItem('marcus_goals')) {\n    localStorage.setItem('marcus_goals', JSON.stringify([]));\n  }\n  // Repeat for other storage keys\n}\n\n// Get all goals\nfunction getGoals() {\n  return JSON.parse(localStorage.getItem('marcus_goals') || '[]');\n}\n\n// Save goals\nfunction saveGoals(goals) {\n  localStorage.setItem('marcus_goals', JSON.stringify(goals));\n}\n\n// Add a new goal\nfunction addGoal(goal) {\n  const goals = getGoals();\n  if (goals.length >= 4) {\n    throw new Error('Maximum 4 goals allowed');\n  }\n  if (goals.some(g => g.name === goal.name)) {\n    throw new Error('Goal with this name already exists');\n  }\n  goals.push({\n    ...goal,\n    id: Date.now(),\n    createdAt: new Date().toISOString(),\n    currentAmount: 0,\n    progressHistory: [],\n    isCompleted: false\n  });\n  saveGoals(goals);\n  return goals;\n}\n\n// Similar functions for updating, deleting goals and handling other storage keys\n```",
        "testStrategy": "Test each storage function by calling it and verifying the data is correctly stored in localStorage. Use browser dev tools to inspect localStorage contents. Test edge cases like adding more than 4 goals, adding a goal with a duplicate name, etc.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Goal Creation and Validation",
        "description": "Implement the UI and functionality for creating and deleting goals with validation.",
        "details": "In goals.html, create a form for adding new goals with fields for name, category, target amount, and end date. Implement client-side validation to ensure all fields are filled, names are unique, and the maximum of 4 goals is not exceeded.\n\nHTML structure:\n```html\n<form id=\"goal-form\" class=\"mb-8\">\n  <div class=\"mb-4\">\n    <label for=\"goal-name\" class=\"block text-sm font-medium\">Goal Name</label>\n    <input type=\"text\" id=\"goal-name\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" required>\n    <div id=\"name-error\" class=\"text-red-500 text-sm hidden\"></div>\n  </div>\n  <!-- Similar fields for category, target amount, end date -->\n  <button type=\"submit\" class=\"bg-blue-600 text-white px-4 py-2 rounded-md\">Create Goal</button>\n</form>\n```\n\nJavaScript for validation and submission:\n```javascript\ndocument.getElementById('goal-form').addEventListener('submit', function(e) {\n  e.preventDefault();\n  const nameInput = document.getElementById('goal-name');\n  const categoryInput = document.getElementById('goal-category');\n  const targetInput = document.getElementById('goal-target');\n  const dateInput = document.getElementById('goal-date');\n  \n  // Reset errors\n  document.querySelectorAll('.text-red-500').forEach(el => el.classList.add('hidden'));\n  \n  // Validate inputs\n  let isValid = true;\n  \n  // Check for empty fields\n  if (!nameInput.value.trim()) {\n    document.getElementById('name-error').textContent = 'Name is required';\n    document.getElementById('name-error').classList.remove('hidden');\n    isValid = false;\n  }\n  \n  // Check for duplicate names\n  const goals = getGoals();\n  if (goals.some(g => g.name === nameInput.value.trim())) {\n    document.getElementById('name-error').textContent = 'Goal with this name already exists';\n    document.getElementById('name-error').classList.remove('hidden');\n    isValid = false;\n  }\n  \n  // Check for maximum goals\n  if (goals.length >= 4) {\n    alert('Maximum 4 goals allowed. Please delete a goal before creating a new one.');\n    isValid = false;\n  }\n  \n  // Similar validation for other fields\n  \n  if (isValid) {\n    try {\n      addGoal({\n        name: nameInput.value.trim(),\n        category: categoryInput.value.trim(),\n        targetAmount: parseFloat(targetInput.value),\n        endDate: dateInput.value,\n      });\n      \n      // Reset form and refresh goals list\n      this.reset();\n      displayGoals();\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n});\n\n// Function to display goals\nfunction displayGoals() {\n  const goalsContainer = document.getElementById('goals-list');\n  const goals = getGoals();\n  \n  goalsContainer.innerHTML = '';\n  \n  goals.forEach(goal => {\n    const goalElement = document.createElement('div');\n    goalElement.className = 'goal-item p-4 border rounded-lg mb-4';\n    \n    // Calculate progress percentage\n    const progress = Math.min(100, (goal.currentAmount / goal.targetAmount) * 100);\n    \n    // Check if goal is overdue\n    const isOverdue = new Date(goal.endDate) < new Date() && !goal.isCompleted;\n    \n    goalElement.innerHTML = `\n      <div class=\"flex justify-between items-center mb-2\">\n        <h3 class=\"font-bold\">${goal.name}</h3>\n        <button class=\"delete-goal text-red-500\" data-id=\"${goal.id}\">Delete</button>\n      </div>\n      <div class=\"text-sm mb-1\">${goal.category} | Target: $${goal.targetAmount}</div>\n      <div class=\"text-sm mb-2 ${isOverdue ? 'text-red-500' : ''}\">Deadline: ${new Date(goal.endDate).toLocaleDateString()} ${isOverdue ? '(Overdue)' : ''}</div>\n      <div class=\"relative h-2 bg-gray-200 rounded-full\">\n        <div class=\"absolute top-0 left-0 h-full bg-blue-600 rounded-full\" style=\"width: ${progress}%\"></div>\n      </div>\n      <div class=\"text-right text-sm mt-1\">${progress.toFixed(1)}%</div>\n    `;\n    \n    goalsContainer.appendChild(goalElement);\n  });\n  \n  // Add event listeners for delete buttons\n  document.querySelectorAll('.delete-goal').forEach(button => {\n    button.addEventListener('click', function() {\n      const goalId = parseInt(this.getAttribute('data-id'));\n      deleteGoal(goalId);\n      displayGoals();\n    });\n  });\n}\n\n// Function to delete a goal\nfunction deleteGoal(goalId) {\n  const goals = getGoals();\n  const updatedGoals = goals.filter(goal => goal.id !== goalId);\n  saveGoals(updatedGoals);\n}\n```",
        "testStrategy": "Test goal creation with valid and invalid inputs. Verify validation works for empty fields, duplicate names, and maximum goal limit. Test goal deletion functionality. Verify that overdue goals are properly indicated. Check that the goals list updates correctly after adding or deleting goals.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Progress Tracking and History",
        "description": "Implement functionality to add progress to goals and track history of contributions.",
        "details": "Create UI for adding progress to goals and displaying progress history. Only allow positive amounts for progress updates. Update the goal object with new progress and maintain a history array.\n\nAdd this to goals.html:\n```html\n<div id=\"progress-modal\" class=\"hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n  <div class=\"bg-white p-6 rounded-lg w-full max-w-md\">\n    <h2 id=\"progress-goal-name\" class=\"text-xl font-bold mb-4\">Add Progress</h2>\n    <form id=\"progress-form\">\n      <input type=\"hidden\" id=\"progress-goal-id\">\n      <div class=\"mb-4\">\n        <label for=\"progress-amount\" class=\"block text-sm font-medium\">Amount ($)</label>\n        <input type=\"number\" id=\"progress-amount\" min=\"0.01\" step=\"0.01\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" required>\n      </div>\n      <div class=\"flex justify-end space-x-2\">\n        <button type=\"button\" id=\"cancel-progress\" class=\"px-4 py-2 border rounded-md\">Cancel</button>\n        <button type=\"submit\" class=\"bg-blue-600 text-white px-4 py-2 rounded-md\">Add Progress</button>\n      </div>\n    </form>\n  </div>\n</div>\n```\n\nAdd JavaScript for progress tracking:\n```javascript\n// Modify displayGoals function to add progress buttons\nfunction displayGoals() {\n  // ... existing code ...\n  \n  goalElement.innerHTML = `\n    <!-- ... existing goal display ... -->\n    <div class=\"mt-2\">\n      <button class=\"add-progress bg-blue-600 text-white px-3 py-1 rounded-md text-sm\" data-id=\"${goal.id}\" data-name=\"${goal.name}\">Add Progress</button>\n      <button class=\"view-history text-blue-600 text-sm ml-2\" data-id=\"${goal.id}\">View History</button>\n    </div>\n  `;\n  \n  // ... existing code ...\n  \n  // Add event listeners for progress buttons\n  document.querySelectorAll('.add-progress').forEach(button => {\n    button.addEventListener('click', function() {\n      const goalId = parseInt(this.getAttribute('data-id'));\n      const goalName = this.getAttribute('data-name');\n      openProgressModal(goalId, goalName);\n    });\n  });\n  \n  document.querySelectorAll('.view-history').forEach(button => {\n    button.addEventListener('click', function() {\n      const goalId = parseInt(this.getAttribute('data-id'));\n      showProgressHistory(goalId);\n    });\n  });\n}\n\n// Function to open progress modal\nfunction openProgressModal(goalId, goalName) {\n  document.getElementById('progress-goal-id').value = goalId;\n  document.getElementById('progress-goal-name').textContent = `Add Progress for ${goalName}`;\n  document.getElementById('progress-amount').value = '';\n  document.getElementById('progress-modal').classList.remove('hidden');\n}\n\n// Event listener for progress form submission\ndocument.getElementById('progress-form').addEventListener('submit', function(e) {\n  e.preventDefault();\n  const goalId = parseInt(document.getElementById('progress-goal-id').value);\n  const amount = parseFloat(document.getElementById('progress-amount').value);\n  \n  if (amount <= 0) {\n    alert('Please enter a positive amount');\n    return;\n  }\n  \n  addProgress(goalId, amount);\n  document.getElementById('progress-modal').classList.add('hidden');\n  displayGoals();\n});\n\n// Event listener for cancel button\ndocument.getElementById('cancel-progress').addEventListener('click', function() {\n  document.getElementById('progress-modal').classList.add('hidden');\n});\n\n// Function to add progress to a goal\nfunction addProgress(goalId, amount) {\n  const goals = getGoals();\n  const goalIndex = goals.findIndex(goal => goal.id === goalId);\n  \n  if (goalIndex === -1) return;\n  \n  const goal = goals[goalIndex];\n  const newAmount = goal.currentAmount + amount;\n  const progressEntry = {\n    amount,\n    date: new Date().toISOString(),\n    newTotal: newAmount\n  };\n  \n  goal.currentAmount = newAmount;\n  goal.progressHistory.push(progressEntry);\n  \n  // Check if goal is completed\n  if (newAmount >= goal.targetAmount && !goal.isCompleted) {\n    goal.isCompleted = true;\n    goal.completedAt = new Date().toISOString();\n    celebrateGoalCompletion(goal.name);\n  }\n  \n  goals[goalIndex] = goal;\n  saveGoals(goals);\n  \n  // Update progress storage for statistics\n  const progress = JSON.parse(localStorage.getItem('marcus_progress') || '[]');\n  progress.push(progressEntry);\n  localStorage.setItem('marcus_progress', JSON.stringify(progress));\n}\n\n// Function to show progress history\nfunction showProgressHistory(goalId) {\n  const goals = getGoals();\n  const goal = goals.find(g => g.id === goalId);\n  \n  if (!goal) return;\n  \n  let historyHTML = `<h3 class=\"text-lg font-bold mb-2\">Progress History for ${goal.name}</h3>`;\n  \n  if (goal.progressHistory.length === 0) {\n    historyHTML += '<p>No progress entries yet.</p>';\n  } else {\n    historyHTML += '<ul class=\"space-y-2\">';\n    goal.progressHistory.forEach(entry => {\n      historyHTML += `\n        <li class=\"border-b pb-2\">\n          <div class=\"flex justify-between\">\n            <span>$${entry.amount.toFixed(2)}</span>\n            <span class=\"text-gray-500\">${new Date(entry.date).toLocaleDateString()}</span>\n          </div>\n          <div class=\"text-sm text-right\">Total: $${entry.newTotal.toFixed(2)}</div>\n        </li>\n      `;\n    });\n    historyHTML += '</ul>';\n  }\n  \n  // Show history in a modal or other UI element\n  alert(historyHTML); // Replace with better UI in a real implementation\n}\n\n// Function to celebrate goal completion\nfunction celebrateGoalCompletion(goalName) {\n  // Will be implemented in Task 7\n  console.log(`Goal completed: ${goalName}`);\n}\n```",
        "testStrategy": "Test adding progress to goals with valid and invalid amounts. Verify that progress history is correctly recorded and displayed. Test that progress percentage is calculated correctly. Verify that goals are marked as completed when the target amount is reached. Test that only positive amounts are allowed for progress updates.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Dashboard Implementation",
        "description": "Create the dashboard page with summary statistics and progress bars for all goals.",
        "details": "Implement the dashboard (index.html) to show a summary of all goals, total savings, and progress bars. Include statistics like total saved, number of goals, and completion percentage.\n\nHTML structure for index.html:\n```html\n<div class=\"container mx-auto px-4 pb-20 pt-6\">\n  <h1 class=\"text-2xl font-bold text-center mb-6\">Marcus Savings Tracker</h1>\n  \n  <div class=\"stats-cards grid grid-cols-2 gap-4 mb-6\">\n    <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n      <h3 class=\"text-sm text-gray-600\">Total Saved</h3>\n      <p id=\"total-saved\" class=\"text-2xl font-bold\">$0</p>\n    </div>\n    <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n      <h3 class=\"text-sm text-gray-600\">Active Goals</h3>\n      <p id=\"active-goals\" class=\"text-2xl font-bold\">0/4</p>\n    </div>\n    <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n      <h3 class=\"text-sm text-gray-600\">Completed</h3>\n      <p id=\"completed-goals\" class=\"text-2xl font-bold\">0</p>\n    </div>\n    <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n      <h3 class=\"text-sm text-gray-600\">Overall Progress</h3>\n      <p id=\"overall-progress\" class=\"text-2xl font-bold\">0%</p>\n    </div>\n  </div>\n  \n  <h2 class=\"text-xl font-bold mb-4\">Your Goals</h2>\n  <div id=\"dashboard-goals\" class=\"space-y-4\">\n    <!-- Goals will be inserted here -->\n  </div>\n</div>\n```\n\nJavaScript for dashboard:\n```javascript\n// Function to update dashboard\nfunction updateDashboard() {\n  const goals = getGoals();\n  \n  // Calculate statistics\n  const totalSaved = goals.reduce((sum, goal) => sum + goal.currentAmount, 0);\n  const activeGoals = goals.length;\n  const completedGoals = goals.filter(goal => goal.isCompleted).length;\n  \n  // Calculate overall progress\n  let overallProgress = 0;\n  if (activeGoals > 0) {\n    const totalTargets = goals.reduce((sum, goal) => sum + goal.targetAmount, 0);\n    overallProgress = totalTargets > 0 ? (totalSaved / totalTargets) * 100 : 0;\n  }\n  \n  // Update statistics display\n  document.getElementById('total-saved').textContent = `$${totalSaved.toFixed(2)}`;\n  document.getElementById('active-goals').textContent = `${activeGoals}/4`;\n  document.getElementById('completed-goals').textContent = completedGoals;\n  document.getElementById('overall-progress').textContent = `${overallProgress.toFixed(1)}%`;\n  \n  // Display goals\n  const goalsContainer = document.getElementById('dashboard-goals');\n  goalsContainer.innerHTML = '';\n  \n  if (goals.length === 0) {\n    goalsContainer.innerHTML = `\n      <div class=\"text-center py-8 text-gray-500\">\n        <p>You don't have any savings goals yet.</p>\n        <a href=\"goals.html\" class=\"text-blue-600 font-medium\">Create your first goal</a>\n      </div>\n    `;\n    return;\n  }\n  \n  goals.forEach(goal => {\n    const progress = Math.min(100, (goal.currentAmount / goal.targetAmount) * 100);\n    const isOverdue = new Date(goal.endDate) < new Date() && !goal.isCompleted;\n    \n    const goalElement = document.createElement('div');\n    goalElement.className = 'goal-card p-4 border rounded-lg';\n    goalElement.innerHTML = `\n      <div class=\"flex justify-between items-center mb-2\">\n        <h3 class=\"font-bold\">${goal.name}</h3>\n        <span class=\"text-sm ${isOverdue ? 'text-red-500' : 'text-gray-500'}\">Due: ${new Date(goal.endDate).toLocaleDateString()} ${isOverdue ? '(Overdue)' : ''}</span>\n      </div>\n      <div class=\"flex justify-between text-sm mb-1\">\n        <span>${goal.category}</span>\n        <span>$${goal.currentAmount.toFixed(2)} / $${goal.targetAmount.toFixed(2)}</span>\n      </div>\n      <div class=\"relative h-2 bg-gray-200 rounded-full\">\n        <div class=\"absolute top-0 left-0 h-full bg-blue-600 rounded-full\" style=\"width: ${progress}%\"></div>\n      </div>\n      <div class=\"text-right text-sm mt-1\">${progress.toFixed(1)}%</div>\n    `;\n    \n    goalsContainer.appendChild(goalElement);\n  });\n}\n\n// Call updateDashboard when the page loads\ndocument.addEventListener('DOMContentLoaded', function() {\n  if (window.location.pathname.includes('index.html') || window.location.pathname === '/') {\n    updateDashboard();\n  }\n});\n```",
        "testStrategy": "Test that the dashboard correctly displays all goals and their progress. Verify that statistics (total saved, active goals, completed goals, overall progress) are calculated and displayed correctly. Test with various goal states (empty, partially complete, overdue, etc.) to ensure proper display in all scenarios.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Friends Page Implementation",
        "description": "Create the friends page with hardcoded friend data and sharing functionality.",
        "details": "Implement the friends page (friends.html) with hardcoded friend data and the ability to generate share text for goals.\n\nHTML structure for friends.html:\n```html\n<div class=\"container mx-auto px-4 pb-20 pt-6\">\n  <h1 class=\"text-2xl font-bold text-center mb-6\">Friends</h1>\n  \n  <div id=\"friends-list\" class=\"space-y-4 mb-8\">\n    <!-- Friends will be inserted here -->\n  </div>\n  \n  <div class=\"bg-blue-50 p-4 rounded-lg\">\n    <h2 class=\"text-lg font-bold mb-2\">Share Your Progress</h2>\n    <div class=\"mb-4\">\n      <label for=\"share-goal\" class=\"block text-sm font-medium mb-1\">Select a goal to share</label>\n      <select id=\"share-goal\" class=\"block w-full rounded-md border-gray-300 shadow-sm\">\n        <option value=\"\">Select a goal</option>\n        <!-- Goals will be inserted here -->\n      </select>\n    </div>\n    <div id=\"share-text-container\" class=\"hidden\">\n      <p class=\"text-sm mb-2\">Share this text with your friends:</p>\n      <div id=\"share-text\" class=\"p-3 bg-white border rounded-md text-sm mb-2\"></div>\n      <button id=\"copy-share-text\" class=\"bg-blue-600 text-white px-4 py-2 rounded-md w-full\">Copy to Clipboard</button>\n    </div>\n  </div>\n</div>\n```\n\nJavaScript for friends page:\n```javascript\n// Hardcoded friends data\nconst friendsData = [\n  { id: 1, name: 'Alex Johnson', avatar: '👨‍💼', goals: 3, recentGoal: 'New Car', progress: 65 },\n  { id: 2, name: 'Jamie Smith', avatar: '👩‍💼', goals: 2, recentGoal: 'Vacation', progress: 40 },\n  { id: 3, name: 'Taylor Brown', avatar: '🧑‍💼', goals: 1, recentGoal: 'Emergency Fund', progress: 90 },\n  { id: 4, name: 'Morgan Lee', avatar: '👩‍💻', goals: 4, recentGoal: 'Home Renovation', progress: 25 }\n];\n\n// Function to display friends\nfunction displayFriends() {\n  const friendsContainer = document.getElementById('friends-list');\n  friendsContainer.innerHTML = '';\n  \n  friendsData.forEach(friend => {\n    const friendElement = document.createElement('div');\n    friendElement.className = 'friend-card p-4 border rounded-lg flex items-center';\n    friendElement.innerHTML = `\n      <div class=\"friend-avatar text-3xl mr-4\">${friend.avatar}</div>\n      <div class=\"flex-1\">\n        <h3 class=\"font-bold\">${friend.name}</h3>\n        <div class=\"text-sm text-gray-500\">${friend.goals} active goals</div>\n        <div class=\"text-sm\">Recent: ${friend.recentGoal} (${friend.progress}%)</div>\n      </div>\n    `;\n    \n    friendsContainer.appendChild(friendElement);\n  });\n}\n\n// Function to populate share goal dropdown\nfunction populateShareGoals() {\n  const selectElement = document.getElementById('share-goal');\n  const goals = getGoals();\n  \n  // Clear existing options except the first one\n  while (selectElement.options.length > 1) {\n    selectElement.remove(1);\n  }\n  \n  // Add goals to dropdown\n  goals.forEach(goal => {\n    const option = document.createElement('option');\n    option.value = goal.id;\n    option.textContent = goal.name;\n    selectElement.appendChild(option);\n  });\n}\n\n// Function to generate share text\nfunction generateShareText(goalId) {\n  const goals = getGoals();\n  const goal = goals.find(g => g.id === parseInt(goalId));\n  \n  if (!goal) return '';\n  \n  const progress = Math.min(100, (goal.currentAmount / goal.targetAmount) * 100);\n  \n  return `Hey! I'm saving for ${goal.name} using Marcus Savings Tracker. I've already saved $${goal.currentAmount.toFixed(2)} (${progress.toFixed(1)}%) of my $${goal.targetAmount.toFixed(2)} goal! 💰 #MarcusSavings`;\n}\n\n// Event listener for share goal dropdown\ndocument.getElementById('share-goal')?.addEventListener('change', function() {\n  const goalId = this.value;\n  const shareTextContainer = document.getElementById('share-text-container');\n  const shareText = document.getElementById('share-text');\n  \n  if (!goalId) {\n    shareTextContainer.classList.add('hidden');\n    return;\n  }\n  \n  const text = generateShareText(goalId);\n  shareText.textContent = text;\n  shareTextContainer.classList.remove('hidden');\n});\n\n// Event listener for copy button\ndocument.getElementById('copy-share-text')?.addEventListener('click', function() {\n  const shareText = document.getElementById('share-text').textContent;\n  \n  navigator.clipboard.writeText(shareText).then(() => {\n    this.textContent = 'Copied!';\n    setTimeout(() => {\n      this.textContent = 'Copy to Clipboard';\n    }, 2000);\n  }).catch(err => {\n    console.error('Failed to copy text: ', err);\n  });\n});\n\n// Initialize friends page\ndocument.addEventListener('DOMContentLoaded', function() {\n  if (window.location.pathname.includes('friends.html')) {\n    displayFriends();\n    populateShareGoals();\n  }\n});\n```",
        "testStrategy": "Test that the friends page correctly displays the hardcoded friend data. Verify that the share goal dropdown is populated with the user's goals. Test the share text generation for different goals and progress levels. Test the copy to clipboard functionality. Verify that the UI updates appropriately when selecting different goals to share.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Profile and Settings Implementation",
        "description": "Create the profile page with user statistics and settings that save to localStorage.",
        "details": "Implement the profile page (profile.html) with user statistics and configurable settings that are saved to localStorage.\n\nHTML structure for profile.html:\n```html\n<div class=\"container mx-auto px-4 pb-20 pt-6\">\n  <h1 class=\"text-2xl font-bold text-center mb-6\">Profile</h1>\n  \n  <div class=\"stats-section mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">Your Statistics</h2>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n        <h3 class=\"text-sm text-gray-600\">Total Saved</h3>\n        <p id=\"profile-total-saved\" class=\"text-2xl font-bold\">$0</p>\n      </div>\n      <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n        <h3 class=\"text-sm text-gray-600\">Goals Completed</h3>\n        <p id=\"profile-goals-completed\" class=\"text-2xl font-bold\">0</p>\n      </div>\n      <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n        <h3 class=\"text-sm text-gray-600\">Active Goals</h3>\n        <p id=\"profile-active-goals\" class=\"text-2xl font-bold\">0</p>\n      </div>\n      <div class=\"stat-card bg-blue-100 p-4 rounded-lg\">\n        <h3 class=\"text-sm text-gray-600\">Contributions</h3>\n        <p id=\"profile-contributions\" class=\"text-2xl font-bold\">0</p>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"settings-section\">\n    <h2 class=\"text-lg font-bold mb-4\">Settings</h2>\n    <form id=\"settings-form\" class=\"space-y-4\">\n      <div>\n        <label for=\"display-name\" class=\"block text-sm font-medium mb-1\">Display Name</label>\n        <input type=\"text\" id=\"display-name\" class=\"block w-full rounded-md border-gray-300 shadow-sm\">\n      </div>\n      \n      <div>\n        <label class=\"block text-sm font-medium mb-1\">Notification Preferences</label>\n        <div class=\"space-y-2\">\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"notify-progress\" class=\"mr-2\">\n            <span>Progress Updates</span>\n          </label>\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"notify-goals\" class=\"mr-2\">\n            <span>Goal Completion</span>\n          </label>\n          <label class=\"flex items-center\">\n            <input type=\"checkbox\" id=\"notify-reminders\" class=\"mr-2\">\n            <span>Deadline Reminders</span>\n          </label>\n        </div>\n      </div>\n      \n      <div>\n        <label for=\"currency\" class=\"block text-sm font-medium mb-1\">Currency Display</label>\n        <select id=\"currency\" class=\"block w-full rounded-md border-gray-300 shadow-sm\">\n          <option value=\"USD\">USD ($)</option>\n          <option value=\"EUR\">EUR (€)</option>\n          <option value=\"GBP\">GBP (£)</option>\n        </select>\n      </div>\n      \n      <button type=\"submit\" class=\"bg-blue-600 text-white px-4 py-2 rounded-md w-full\">Save Settings</button>\n    </form>\n  </div>\n</div>\n```\n\nJavaScript for profile page:\n```javascript\n// Function to load user statistics\nfunction loadUserStats() {\n  const goals = getGoals();\n  const progress = JSON.parse(localStorage.getItem('marcus_progress') || '[]');\n  \n  // Calculate statistics\n  const totalSaved = goals.reduce((sum, goal) => sum + goal.currentAmount, 0);\n  const goalsCompleted = goals.filter(goal => goal.isCompleted).length;\n  const activeGoals = goals.length - goalsCompleted;\n  const contributions = progress.length;\n  \n  // Update statistics display\n  document.getElementById('profile-total-saved').textContent = `$${totalSaved.toFixed(2)}`;\n  document.getElementById('profile-goals-completed').textContent = goalsCompleted;\n  document.getElementById('profile-active-goals').textContent = activeGoals;\n  document.getElementById('profile-contributions').textContent = contributions;\n  \n  // Update stats in localStorage\n  const stats = {\n    totalSaved,\n    goalsCompleted,\n    activeGoals,\n    contributions,\n    lastUpdated: new Date().toISOString()\n  };\n  \n  localStorage.setItem('marcus_stats', JSON.stringify(stats));\n}\n\n// Function to load user settings\nfunction loadUserSettings() {\n  const settings = JSON.parse(localStorage.getItem('marcus_settings') || '{}');\n  \n  // Set default settings if not exists\n  const defaultSettings = {\n    displayName: 'User',\n    notifications: {\n      progress: true,\n      goals: true,\n      reminders: false\n    },\n    currency: 'USD'\n  };\n  \n  const userSettings = { ...defaultSettings, ...settings };\n  \n  // Populate form with settings\n  document.getElementById('display-name').value = userSettings.displayName;\n  document.getElementById('notify-progress').checked = userSettings.notifications.progress;\n  document.getElementById('notify-goals').checked = userSettings.notifications.goals;\n  document.getElementById('notify-reminders').checked = userSettings.notifications.reminders;\n  document.getElementById('currency').value = userSettings.currency;\n  \n  return userSettings;\n}\n\n// Function to save user settings\nfunction saveUserSettings(event) {\n  event.preventDefault();\n  \n  const settings = {\n    displayName: document.getElementById('display-name').value.trim() || 'User',\n    notifications: {\n      progress: document.getElementById('notify-progress').checked,\n      goals: document.getElementById('notify-goals').checked,\n      reminders: document.getElementById('notify-reminders').checked\n    },\n    currency: document.getElementById('currency').value\n  };\n  \n  localStorage.setItem('marcus_settings', JSON.stringify(settings));\n  \n  // Show confirmation\n  alert('Settings saved successfully!');\n}\n\n// Initialize profile page\ndocument.addEventListener('DOMContentLoaded', function() {\n  if (window.location.pathname.includes('profile.html')) {\n    loadUserStats();\n    loadUserSettings();\n    \n    // Add event listener for settings form\n    document.getElementById('settings-form').addEventListener('submit', saveUserSettings);\n  }\n});\n```",
        "testStrategy": "Test that the profile page correctly displays user statistics. Verify that settings are saved to localStorage when the form is submitted. Test loading settings from localStorage when the page loads. Test with various settings combinations to ensure all settings are properly saved and loaded.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Animations and Goal Completion Celebration",
        "description": "Implement smooth animations and a celebration effect when a goal reaches 100%.",
        "details": "Add animations to the UI and implement a celebration effect when a goal reaches 100% completion.\n\nAdd this CSS to styles.css:\n```css\n/* Animation keyframes */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n@keyframes confetti {\n  0% { transform: translateY(0) rotate(0deg); opacity: 1; }\n  100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }\n}\n\n/* Apply animations */\n.goal-card, .friend-card, .stat-card {\n  animation: fadeIn 0.5s ease-out, slideUp 0.5s ease-out;\n}\n\n.progress-bar-fill {\n  transition: width 0.5s ease-out;\n}\n\n/* Celebration styles */\n.celebration-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  animation: fadeIn 0.3s ease-out;\n}\n\n.celebration-content {\n  background-color: white;\n  border-radius: 1rem;\n  padding: 2rem;\n  text-align: center;\n  max-width: 90%;\n  animation: slideUp 0.5s ease-out, pulse 2s infinite;\n}\n\n.confetti {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  background-color: #f00;\n  animation: confetti 4s ease-out forwards;\n}\n```\n\nAdd JavaScript for animations and celebration:\n```javascript\n// Function to celebrate goal completion\nfunction celebrateGoalCompletion(goalName) {\n  // Create celebration overlay\n  const overlay = document.createElement('div');\n  overlay.className = 'celebration-overlay';\n  \n  const content = document.createElement('div');\n  content.className = 'celebration-content';\n  content.innerHTML = `\n    <h2 class=\"text-2xl font-bold mb-4\">🎉 Goal Completed! 🎉</h2>\n    <p class=\"text-xl mb-6\">Congratulations! You've reached your savings goal for:</p>\n    <p class=\"text-2xl font-bold text-blue-600 mb-8\">${goalName}</p>\n    <button id=\"close-celebration\" class=\"bg-blue-600 text-white px-6 py-3 rounded-lg text-lg\">Continue</button>\n  `;\n  \n  overlay.appendChild(content);\n  document.body.appendChild(overlay);\n  \n  // Create confetti effect\n  createConfetti();\n  \n  // Add event listener to close button\n  document.getElementById('close-celebration').addEventListener('click', function() {\n    overlay.remove();\n  });\n  \n  // Update achievements in localStorage\n  const achievements = JSON.parse(localStorage.getItem('marcus_achievements') || '[]');\n  achievements.push({\n    type: 'goal_completed',\n    goalName,\n    date: new Date().toISOString()\n  });\n  localStorage.setItem('marcus_achievements', JSON.stringify(achievements));\n}\n\n// Function to create confetti effect\nfunction createConfetti() {\n  const colors = ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff'];\n  const confettiCount = 100;\n  \n  for (let i = 0; i < confettiCount; i++) {\n    const confetti = document.createElement('div');\n    confetti.className = 'confetti';\n    confetti.style.left = `${Math.random() * 100}vw`;\n    confetti.style.top = `-10px`;\n    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n    confetti.style.width = `${Math.random() * 10 + 5}px`;\n    confetti.style.height = `${Math.random() * 10 + 5}px`;\n    confetti.style.animationDuration = `${Math.random() * 3 + 2}s`;\n    document.body.appendChild(confetti);\n    \n    // Remove confetti after animation completes\n    setTimeout(() => {\n      confetti.remove();\n    }, 5000);\n  }\n}\n\n// Add smooth animations to progress bars\nfunction animateProgressBars() {\n  const progressBars = document.querySelectorAll('.progress-bar-fill');\n  progressBars.forEach(bar => {\n    const width = bar.style.width;\n    bar.style.width = '0';\n    setTimeout(() => {\n      bar.style.width = width;\n    }, 100);\n  });\n}\n\n// Call animateProgressBars when displaying goals\nfunction displayGoals() {\n  // ... existing code ...\n  \n  // Add animation class to progress bar fill\n  const progressFills = document.querySelectorAll('.absolute.top-0.left-0.h-full.bg-blue-600.rounded-full');\n  progressFills.forEach(fill => {\n    fill.classList.add('progress-bar-fill');\n  });\n  \n  // Animate progress bars\n  animateProgressBars();\n}\n```",
        "testStrategy": "Test that animations are applied to UI elements. Verify that the celebration effect appears when a goal reaches 100%. Test the confetti animation. Check that the celebration can be dismissed by clicking the continue button. Verify that completed goals are recorded in the achievements localStorage key.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Mobile-First Responsive Design",
        "description": "Ensure the application is fully responsive with a mobile-first approach using Tailwind CSS.",
        "details": "Implement responsive design for all pages to ensure they work well on mobile devices and larger screens.\n\nAdd this to the head section of all HTML files:\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\nUpdate CSS for responsive design:\n```css\n/* Base styles are already mobile-first with Tailwind */\n\n/* Additional responsive adjustments */\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n  \n  .stats-cards {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n  \n  /* Adjust bottom navigation for larger screens */\n  .bottom-nav {\n    height: 64px;\n  }\n  \n  .nav-item span {\n    font-size: 0.875rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n  \n  /* Optional: Convert bottom nav to side nav on large screens */\n  .bottom-nav {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 200px;\n    height: 100vh;\n    flex-direction: column;\n  }\n  \n  .bottom-nav .flex {\n    flex-direction: column;\n    height: auto;\n    padding-top: 2rem;\n  }\n  \n  .nav-item {\n    margin-bottom: 1.5rem;\n  }\n  \n  .main-content {\n    margin-left: 200px;\n  }\n}\n```\n\nUpdate JavaScript for responsive behavior:\n```javascript\n// Function to handle responsive layout\nfunction handleResponsiveLayout() {\n  const isLargeScreen = window.innerWidth >= 1024;\n  const mainContent = document.querySelector('.container');\n  const bottomNav = document.querySelector('.bottom-nav');\n  \n  if (isLargeScreen) {\n    bottomNav?.classList.add('side-nav');\n    mainContent?.classList.add('main-content');\n  } else {\n    bottomNav?.classList.remove('side-nav');\n    mainContent?.classList.remove('main-content');\n  }\n}\n\n// Call on page load and window resize\nwindow.addEventListener('load', handleResponsiveLayout);\nwindow.addEventListener('resize', handleResponsiveLayout);\n```\n\nUpdate HTML structure for better responsiveness:\n```html\n<!-- Example for goal cards to be more responsive -->\n<div class=\"goal-card p-4 border rounded-lg sm:flex sm:items-center\">\n  <div class=\"sm:flex-1\">\n    <h3 class=\"font-bold\">${goal.name}</h3>\n    <div class=\"text-sm text-gray-500\">${goal.category}</div>\n  </div>\n  <div class=\"mt-2 sm:mt-0 sm:ml-4 sm:flex-1\">\n    <div class=\"flex justify-between text-sm mb-1\">\n      <span>$${goal.currentAmount.toFixed(2)} / $${goal.targetAmount.toFixed(2)}</span>\n      <span>${progress.toFixed(1)}%</span>\n    </div>\n    <div class=\"relative h-2 bg-gray-200 rounded-full\">\n      <div class=\"absolute top-0 left-0 h-full bg-blue-600 rounded-full progress-bar-fill\" style=\"width: ${progress}%\"></div>\n    </div>\n  </div>\n</div>\n```",
        "testStrategy": "Test the application on various screen sizes (mobile, tablet, desktop) to ensure responsive behavior. Verify that the layout adjusts appropriately for different screen sizes. Test navigation usability on mobile devices. Ensure that all interactive elements are easily tappable on small screens. Verify that the content is readable and well-organized on all screen sizes.",
        "priority": "high",
        "dependencies": [
          1,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Final Integration and Testing",
        "description": "Integrate all components, perform comprehensive testing, and fix any issues.",
        "details": "Integrate all components of the application, ensure they work together seamlessly, and perform comprehensive testing to identify and fix any issues.\n\nIntegration steps:\n1. Ensure all JavaScript files are properly linked in HTML files\n2. Verify that localStorage keys are consistent across all components\n3. Test navigation between pages\n4. Verify data persistence across page refreshes\n5. Test all user interactions\n\nCreate a main.js file to initialize the application:\n```javascript\n// Initialize application\nfunction initializeApp() {\n  // Initialize storage\n  initializeStorage();\n  \n  // Set up navigation highlighting\n  setupNavigation();\n  \n  // Load page-specific content\n  loadPageContent();\n  \n  // Apply responsive layout\n  handleResponsiveLayout();\n}\n\n// Function to set up navigation highlighting\nfunction setupNavigation() {\n  const currentPage = window.location.pathname;\n  const navItems = document.querySelectorAll('.nav-item');\n  \n  navItems.forEach(item => {\n    const href = item.getAttribute('href');\n    if (currentPage.includes(href) || (href === 'index.html' && (currentPage === '/' || currentPage.endsWith('/')))) {\n      item.classList.add('active', 'text-blue-600');\n    } else {\n      item.classList.remove('active', 'text-blue-600');\n    }\n  });\n}\n\n// Function to load page-specific content\nfunction loadPageContent() {\n  const currentPage = window.location.pathname;\n  \n  if (currentPage.includes('index.html') || currentPage === '/' || currentPage.endsWith('/')) {\n    updateDashboard();\n  } else if (currentPage.includes('goals.html')) {\n    displayGoals();\n  } else if (currentPage.includes('friends.html')) {\n    displayFriends();\n    populateShareGoals();\n  } else if (currentPage.includes('profile.html')) {\n    loadUserStats();\n    loadUserSettings();\n  }\n}\n\n// Call initializeApp when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', initializeApp);\n```\n\nCreate a comprehensive test plan:\n```\n1. Setup and Navigation Tests:\n   - Verify all pages load without errors\n   - Test navigation between all pages\n   - Verify active page is highlighted in navigation\n   - Test responsive layout on different screen sizes\n\n2. Goal Management Tests:\n   - Create a new goal with valid data\n   - Attempt to create a goal with missing fields (should show validation errors)\n   - Attempt to create a goal with a duplicate name (should show validation error)\n   - Create maximum number of goals (4) and verify cannot add more\n   - Delete a goal and verify it's removed\n   - Verify goal data persists after page refresh\n\n3. Progress Tracking Tests:\n   - Add progress to a goal with a valid amount\n   - Attempt to add negative progress (should be prevented)\n   - Verify progress history is recorded correctly\n   - Verify progress percentage is calculated correctly\n   - Add progress to complete a goal and verify celebration appears\n   - Verify overdue goals are properly indicated\n\n4. Dashboard Tests:\n   - Verify statistics are calculated correctly\n   - Verify all goals appear on dashboard\n   - Verify progress bars display correctly\n\n5. Friends Page Tests:\n   - Verify friends list displays correctly\n   - Test share text generation for different goals\n   - Test copy to clipboard functionality\n\n6. Profile Page Tests:\n   - Verify statistics display correctly\n   - Change settings and verify they're saved\n   - Reload page and verify settings persist\n\n7. Animation Tests:\n   - Verify UI animations work correctly\n   - Test goal completion celebration\n   - Verify confetti animation\n\n8. Edge Case Tests:\n   - Test with no goals created\n   - Test with goals but no progress\n   - Test with completed goals\n   - Test with overdue goals\n```\n\nFix common issues:\n```javascript\n// Fix for progress calculation when target amount is 0\nfunction calculateProgress(current, target) {\n  if (target <= 0) return 0;\n  return Math.min(100, (current / target) * 100);\n}\n\n// Fix for date handling in Safari\nfunction formatDate(dateString) {\n  const date = new Date(dateString);\n  if (isNaN(date.getTime())) {\n    // Handle invalid date\n    return 'Invalid date';\n  }\n  return date.toLocaleDateString();\n}\n\n// Fix for localStorage availability\nfunction isLocalStorageAvailable() {\n  try {\n    const test = 'test';\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Use this check before accessing localStorage\nif (!isLocalStorageAvailable()) {\n  alert('Local storage is not available in your browser. The application may not work correctly.');\n}\n```",
        "testStrategy": "Execute the comprehensive test plan. Test all features on multiple browsers (Chrome, Firefox, Safari). Test on both mobile and desktop devices. Verify that all requirements from the PRD are met. Document and fix any issues found during testing. Perform a final review to ensure all functionality works as expected.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-24T07:23:55.202Z",
      "updated": "2025-09-24T07:23:55.202Z",
      "description": "Tasks for master context"
    }
  }
}